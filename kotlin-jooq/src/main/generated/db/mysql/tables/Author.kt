/*
 * This file is generated by jOOQ.
 */
package db.mysql.tables


import db.mysql.Testdb
import db.mysql.keys.KEY_AUTHOR_PRIMARY
import db.mysql.tables.records.AuthorRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Author(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AuthorRecord>?,
    aliased: Table<AuthorRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AuthorRecord>(
    alias,
    Testdb.TESTDB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>testdb.author</code>
         */
        val AUTHOR: Author = Author()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthorRecord> = AuthorRecord::class.java

    /**
     * The column <code>testdb.author.id</code>.
     */
    val ID: TableField<AuthorRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>testdb.author.first_name</code>.
     */
    val FIRST_NAME: TableField<AuthorRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>testdb.author.last_name</code>.
     */
    val LAST_NAME: TableField<AuthorRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<AuthorRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AuthorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>testdb.author</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>testdb.author</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>testdb.author</code> table reference
     */
    constructor(): this(DSL.name("author"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AuthorRecord>): this(Internal.createPathAlias(child, key), child, key, AUTHOR, null)
    override fun getSchema(): Schema? = if (aliased()) null else Testdb.TESTDB
    override fun getPrimaryKey(): UniqueKey<AuthorRecord> = KEY_AUTHOR_PRIMARY
    override fun `as`(alias: String): Author = Author(DSL.name(alias), this)
    override fun `as`(alias: Name): Author = Author(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Author = Author(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Author = Author(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
